Version 1
SubGoalCombiner SGC_AND
INITSECTION
// This Goal is primarily a patch 8 workaround, because the toolbar icons for toggles now default to the Equipment icon instead of the Passive icon. 
// Unsure if this was an intentional change, but result is the toolbar looks stupid with 5+ identical passive toggle icons, if their source is the same equipment piece.
// Applying passive toggles directly or via a Status preserves the icon, so we do that instead now.

// Unfortunately, using Statuses instead of the Equipment is horrible to manage passive toggles. StatusOnEquip is a disaster.
// It's fine, until the player quick-swaps instruments, and then all the status add and remove events trip over each other.
// This event firing mess then results in Passive toggles that are just flat broken on the toolbar. Lovely.

// So, to avoid this, we apply the Passives directly on the equip event, and make use of timers when unequipping (to avoid event collisions).
// 90% of this goal exists to revert the toolbar icon behaviour in patch 8 for the mod instruments - whyyy Larian whyy :'(

// Mapping config passive toggles to enable by instrument tag
DB_TagToPassiveMap_EmbersLute((TAG)EMLUTE_GNOME_MODE_ac260048-1979-4af5-8ebc-37bab10e321b,"Emlute_ViolinsToggle");
DB_TagToPassiveMap_EmbersLute((TAG)EMLUTE_GNOME_MODE_ac260048-1979-4af5-8ebc-37bab10e321b,"Emlute_LyresToggle");
DB_TagToPassiveMap_EmbersLute((TAG)EMLUTE_GNOME_MODE_ac260048-1979-4af5-8ebc-37bab10e321b,"Emlute_DrumsToggle");
DB_TagToPassiveMap_EmbersLute((TAG)EMLUTE_GNOME_MODE_ac260048-1979-4af5-8ebc-37bab10e321b,"Emlute_FlutesToggle");
DB_TagToPassiveMap_EmbersLute((TAG)EMLUTE_GNOME_MODE_ac260048-1979-4af5-8ebc-37bab10e321b,"Emlute_LutesToggle");
DB_TagToPassiveMap_EmbersLute((TAG)EMLUTE_GNOME_MODE_ac260048-1979-4af5-8ebc-37bab10e321b,"Emlute_VocalsToggle");
DB_TagToPassiveMap_EmbersLute((TAG)EMLUTE_SPIRIT_MODE_d90f40cc-8091-4807-961c-b3b1e225ad95,"Emlute_SummonOnPerform");
DB_TagToPassiveMap_EmbersLute((TAG)EMLUTE_SPIRIT_MODE_d90f40cc-8091-4807-961c-b3b1e225ad95,"Emlute_SummonOnPerform_Vocal");
DB_TagToPassiveMap_EmbersLute((TAG)EMLUTE_SPIRIT_MODE_d90f40cc-8091-4807-961c-b3b1e225ad95,"Emlute_SummonOnPerform_TieflingBard");
DB_TagToPassiveMap_EmbersLute((TAG)EMLUTE_SPIRIT_MODE_d90f40cc-8091-4807-961c-b3b1e225ad95,"Emlute_ViolinsToggle");
DB_TagToPassiveMap_EmbersLute((TAG)EMLUTE_SPIRIT_MODE_d90f40cc-8091-4807-961c-b3b1e225ad95,"Emlute_LyresToggle");
DB_TagToPassiveMap_EmbersLute((TAG)EMLUTE_SPIRIT_MODE_d90f40cc-8091-4807-961c-b3b1e225ad95,"Emlute_DrumsToggle");
DB_TagToPassiveMap_EmbersLute((TAG)EMLUTE_SPIRIT_MODE_d90f40cc-8091-4807-961c-b3b1e225ad95,"Emlute_FlutesToggle");
DB_TagToPassiveMap_EmbersLute((TAG)EMLUTE_SPIRIT_MODE_d90f40cc-8091-4807-961c-b3b1e225ad95,"Emlute_LutesToggle");
DB_TagToPassiveMap_EmbersLute((TAG)EMLUTE_SPIRIT_MODE_d90f40cc-8091-4807-961c-b3b1e225ad95,"Emlute_VocalsToggle");
DB_TagToPassiveMap_EmbersLute((TAG)EMLUTE_VFX_SPRITES_a0c53732-1d76-4222-b93c-35ea3bdcda8d,"Emlute_DancingSprites");
DB_TagToPassiveMap_EmbersLute((TAG)EMLUTE_VFX_HAUNTED_4fa397b1-21b1-458d-acd3-1391e79fa23a,"Emlute_Violin_Undead_Spirits");
DB_TagToPassiveMap_EmbersLute((TAG)EMLUTE_VFX_CELESTIAL_2591e6f8-c1cb-4002-a631-6e4b58b92879,"Emlute_CelestialLyre_UseWingsVFX");
DB_TagToPassiveMap_EmbersLute((TAG)EMLUTE_VFX_CELESTIAL_2591e6f8-c1cb-4002-a631-6e4b58b92879,"Emlute_CelestialLyre_UseHaloVFX");
DB_TagToPassiveMap_EmbersLute((TAG)EMLUTE_VFX_CELESTIAL_2591e6f8-c1cb-4002-a631-6e4b58b92879,"Emlute_CelestialLyre_Spirits");
DB_TagToPassiveMap_EmbersLute((TAG)EMLUTE_VFX_CELESTIAL_FALLEN_2403cf12-c7ee-44f0-856a-d593198e698c,"Emlute_CelestialLyre_FallenSpirits");

// Every time I resort to timers, a thousand kittens cry
// Basically we delay passive removal by a couple of seconds, and then only remove if they're still not required
DB_PassiveTimer_EmbersLute("MusicalConductor","Emlute_VocalsToggle",2100);
DB_PassiveTimer_EmbersLute("MusicalConductor","Emlute_ViolinsToggle",2110);
DB_PassiveTimer_EmbersLute("MusicalConductor","Emlute_LyresToggle",2120);
DB_PassiveTimer_EmbersLute("MusicalConductor","Emlute_DrumsToggle",2130);
DB_PassiveTimer_EmbersLute("MusicalConductor","Emlute_FlutesToggle",2140);
DB_PassiveTimer_EmbersLute("MusicalConductor","Emlute_LutesToggle",2150);
DB_PassiveTimer_EmbersLute("InstrumentVFX","Emlute_DancingSprites",2200);
DB_PassiveTimer_EmbersLute("InstrumentVFX","Emlute_Violin_Undead_Spirits",2200);
DB_PassiveTimer_EmbersLute("InstrumentVFX","Emlute_CelestialLyre_Spirits",2200);
DB_PassiveTimer_EmbersLute("InstrumentVFX","Emlute_CelestialLyre_FallenSpirits",2200);
DB_PassiveTimer_EmbersLute("SummonToggle","Emlute_SummonOnPerform",2300);
DB_PassiveTimer_EmbersLute("SummonToggle","Emlute_SummonOnPerform_Vocal",2310);
DB_PassiveTimer_EmbersLute("SummonToggle","Emlute_SummonOnPerform_TieflingBard",2320);
DB_PassiveTimer_EmbersLute("InstrumentConfig","Emlute_CelestialLyre_UseWingsVFX",2400);
DB_PassiveTimer_EmbersLute("InstrumentConfig","Emlute_CelestialLyre_UseHaloVFX",2410);
KBSECTION
// Player equips a mod instrument.
// Add any passive toggles required by the instrument.
IF
Equipped(_Instrument, _Character)
AND
DB_Players(_Character)
AND
DB_TagToPassiveMap_EmbersLute(_Tag, _PassiveToggle)
AND
IsTagged(_Instrument, _Tag, 1)
THEN
PROC_Emlute_AddPassive(_Character, _PassiveToggle);

// Any player unequips an Ember's Lute mod instrument.
// Clear up passive toggles no longer required.
IF
Unequipped(_Instrument, _Character)
AND
DB_Players(_Character)
AND
DB_TagToPassiveMap_EmbersLute(_Tag, _PassiveToggle)
AND
IsTagged(_Instrument, _Tag, 1)
THEN
PROC_Emlute_RemovePassiveToggle(_Character, _Instrument, _PassiveToggle);

// Any player unequips any Ember's Lute mod instrument, or a varnished instrument.
// Spike 1 turn of a varnish status overwrite to ensure it gets removed.
// Call the spell to dismiss all custom summons in the area.
IF
Unequipped(_Instrument, _Character)
AND
DB_Players(_Character)
AND
QRY_IsEmbersLuteInstrument(_Instrument)
THEN
ApplyStatus(_Instrument,"EMLUTE_VARNISH_INSTRUMENT_CLEAR",1.0);
UseSpell(_Character,"Shout_Dismiss_All_MusicalSpirits",_Character);

// Handle edge case for hot-swapping a varnished instrument with a custom instrument
// Need to throw in a short delay while the status clears up the passives
// ... and then check if we have to put them all back on again
IF
TagCleared(_Character,(TAG)EMLUTE_INSTRUMENT_VARNISH_6dfa4afa-a78c-4240-98c8-3d6b615d8883)
THEN
DebugText(_Character, "Varnish status removed from player");
ObjectTimerCancel(_Character,"EmbersLute_VarnishedRemoved");
ObjectTimerLaunch(_Character,"EmbersLute_VarnishedRemoved",1500);
IF
ObjectTimerFinished((CHARACTER)_Character, "EmbersLute_VarnishedRemoved")
AND
DB_Players(_Character)
AND
GetEquippedItem(_Character, "MusicalInstrument", _Instrument)
AND
DB_TagToPassiveMap_EmbersLute(_Tag, _PassiveToggle)
AND
IsTagged(_Instrument, _Tag, 1)
THEN
PROC_Emlute_AddPassive(_Character, _PassiveToggle);

PROC
PROC_Emlute_RemovePassiveToggle((CHARACTER)_Character, (ITEM)_Instrument, (STRING)_PassiveToggle)
AND
DB_PassiveTimer_EmbersLute(_, _PassiveToggle, _Delay)
AND
Concatenate("Remove check timer for: ", _PassiveToggle, _DebugMsg)
THEN
// THROW TIMER
DebugText(_Character,_DebugMsg);
ObjectTimerCancel(_Character,_PassiveToggle);
ObjectTimerLaunch(_Character,_PassiveToggle,_Delay);
// CATCH TIMER
// Only remove toggle if no longer needed.
IF
ObjectTimerFinished((CHARACTER)_Character, _PassiveToggle)
AND
NOT QRY_HasEmbersLuteInstrument(_Character)
THEN
PROC_Emlute_RemovePassive(_Character, _PassiveToggle);
//
// This handles the instrument hot-swap cases.
IF
ObjectTimerFinished((CHARACTER)_Character, _PassiveToggle)
AND
GetEquippedItem(_Character, "MusicalInstrument", _Instrument)
AND
NOT QRY_InstrumentHasPassiveToggle(_Instrument,_PassiveToggle)
THEN
PROC_Emlute_RemovePassive(_Character, _PassiveToggle);

PROC
PROC_Emlute_AddPassive((CHARACTER)_Character, (STRING)_Passive)
AND
HasPassive(_Character,_Passive,0)
THEN
AddPassive(_Character, _Passive);

PROC
PROC_Emlute_RemovePassive((CHARACTER)_Character, (STRING)_Passive)
AND
HasPassive(_Character,_Passive,1)
AND
Concatenate("Removing passive: ", _Passive, _DebugMsg)
THEN
DebugText(_Character, _DebugMsg);
RemovePassive(_Character, _Passive);

QRY
QRY_HasEmbersLuteInstrument((CHARACTER)_Character)
AND
GetEquippedItem(_Character, "MusicalInstrument", _Instrument)
AND 
QRY_IsEmbersLuteInstrument(_Instrument)
THEN
DB_NOOP(1);

QRY
QRY_IsEmbersLuteInstrument((ITEM)_Instrument)
AND
DB_DLC_DivinitySongPack_InstrumentTags_EmbersLute(_Tag)
AND
IsTagged(_Instrument, _Tag, 1)
THEN
DB_NOOP(1);

QRY
QRY_InstrumentHasPassiveToggle((ITEM)_Instrument,(STRING)_PassiveToggle)
AND
DB_TagToPassiveMap_EmbersLute(_Tag,_PassiveToggle)
AND
IsTagged(_Instrument, _Tag, 1)
THEN
DB_NOOP(1);
EXITSECTION

ENDEXITSECTION
