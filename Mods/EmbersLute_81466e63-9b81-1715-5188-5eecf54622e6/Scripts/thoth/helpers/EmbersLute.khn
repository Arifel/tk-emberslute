local __util = require 'larian.util'

function Emlute_TargetHasMusicAura(entity)
	local entity = entity or context.Target
	local spritesStatus = HasStatus('EMLUTE_PERFORM_THEPOWER_SPRITES',entity) | HasStatus('EMLUTE_PERFORM_BARDDANCE_SPRITES',entity) | HasStatus('EMLUTE_PERFORM_STARGAZING_SPRITES',entity) | HasStatus('EMLUTE_PERFORM_DOS2_1_SPRITES',entity) | HasStatus('EMLUTE_PERFORM_DOS2_2_SPRITES',entity) | HasStatus('EMLUTE_PERFORM_DOS2_3_SPRITES',entity)
	local musicStatus = HasStatus('EMLUTE_PERFORM_THEPOWER',entity) | HasStatus('EMLUTE_PERFORM_BARDDANCE',entity) | HasStatus('EMLUTE_PERFORM_STARGAZING',entity) | HasStatus('EMLUTE_PERFORM_DOS2_1',entity) | HasStatus('EMLUTE_PERFORM_DOS2_2',entity) | HasStatus('EMLUTE_PERFORM_DOS2_3',entity) | HasStatus('EMLUTE_PERFORM_WEEPINGDAWN',entity) | HasStatus('EMLUTE_PERFORM_ENDLESSSPRING',entity) | HasStatus('EMLUTE_PERFORM_WELIVE',entity) | HasStatus('EMLUTE_PERFORM_HARPYSONG',entity) | HasStatus('EMLUTE_PERFORM_WATERQUEEN',entity) | HasStatus('EMLUTE_PERFORM_THEPOWERVOCALS',entity) 
	local auraOnlyStatus = HasStatus('EMLUTE_PERFORM_THEPOWER_AURAONLY',entity) | HasStatus('EMLUTE_PERFORM_BARDDANCE_AURAONLY',entity) | HasStatus('EMLUTE_PERFORM_STARGAZING_AURAONLY',entity) | HasStatus('EMLUTE_PERFORM_DOS2_1_AURAONLY',entity) | HasStatus('EMLUTE_PERFORM_DOS2_2_AURAONLY',entity) | HasStatus('EMLUTE_PERFORM_DOS2_3_AURAONLY',entity)
	return (spritesStatus | musicStatus | auraOnlyStatus)
end 

function Emlute_TargetHasManagementAura(entity)
	local entity = entity or context.Target
	return HasStatus('EMLUTE_SPIRIT_MGMT_AURA',entity) | HasStatus('EMLUTE_SPIRIT_MGMT_AURA_DEPLETED',entity) | HasStatus('EMLUTE_SPIRIT_MGMT_AURA_GNOMES',entity)
end

function Emlute_HasMusicJoinStatus(entity)
	local entity = entity or context.Source
	return HasAnyStatus({'EMLUTE_JOIN_THEPOWER','EMLUTE_JOIN_BARDDANCE','EMLUTE_JOIN_STARGAZING','EMLUTE_JOIN_DOS2_1','EMLUTE_JOIN_DOS2_2','EMLUTE_JOIN_DOS2_3','EMLUTE_JOIN_THEPOWER_V2','EMLUTE_JOIN_WEEPINGDAWN','EMLUTE_JOIN_HARPYSONG','EMLUTE_JOIN_WATERQUEEN','EMLUTE_JOIN_THEPOWERVOCALS'},{},{},entity)
end

function Emlute_TargetHasExcludedFromAuraStatus(auraTar,auraSrc)
	local auraSrc = auraSrc or context.Source
	local auraTar = auraTar or context.Target
	local instrument = GetItemInEquipmentSlot(EquipmentSlot.MusicalInstrument,auraTar)
	local emluteInstrument = (instrument.IsValid & Tagged('EMLUTE',instrument))
    return HasStatus('EMLUTE_SILENCED_SPIRIT',auraTar) | Emlute_HasMusicJoinStatus(auraSrc) | Self(auraSrc,auraTar) | Emlute_TargetHasMusicAura(auraTar) | (emluteInstrument & Emlute_TargetHasMusicAura(instrument))
end

function Emlute_StatusIsAddOnSpiritVFX()
    return StatusId('EMLUTE_UNDEAD_AURA_MUSIC1_VFX') | StatusId('EMLUTE_UNDEAD_AURA_MUSIC2_VFX') | StatusId('EMLUTE_UNDEAD_AURA_MUSIC3_VFX') | StatusId('EMLUTE_UNDEAD_AURA_MUSIC4_VFX') | StatusId('EMLUTE_UNDEAD_AURA_MUSIC5_VFX') | StatusId('EMLUTE_UNDEAD_AURA_MUSIC6_VFX')
end

function Emlute_StatusIsSpiritVFX()
	local isAddOnVFX = Emlute_StatusIsAddOnSpiritVFX()
    return isAddOnVFX | StatusId('EMLUTE_AURA_MUSIC1_VFX') | StatusId('EMLUTE_AURA_MUSIC2_VFX') | StatusId('EMLUTE_AURA_MUSIC3_VFX') | StatusId('EMLUTE_AURA_MUSIC4_VFX') | StatusId('EMLUTE_AURA_MUSIC5_VFX') | StatusId('EMLUTE_AURA_MUSIC6_VFX') | StatusId('EMLUTE_SUBTLE_MUSIC1_VFX') | StatusId('EMLUTE_SUBTLE_MUSIC2_VFX')
end

function Emlute_StatusIsDelay()
    return StatusId('EMLUTE_REACTIONS_DELAY') | StatusId('EMLUTE_PERFORM_WEEPINGDAWN_DELAY') 
end

function Emlute_StatusIsManagementAura()
    return StatusId('EMLUTE_SPIRIT_MGMT_AURA') | StatusId('EMLUTE_SPIRIT_MGMT_AURA_DEPLETED') | StatusId('EMLUTE_SPIRIT_MGMT_AURA_GNOMES')
end

function Emlute_StatusIsPaladinBuff()
	return StatusId('AURA_OF_COURAGE_BUFF') | StatusId('AURA_OF_DEVOTION_BUFF') | StatusId('AURA_OF_WARDING_BUFF') | StatusId('AURA_OF_HATE_BUFF') | StatusId('AURA_OF_PROTECTION_BUFF')
end

function Emlute_StatusDoesNotInterruptPerform()
    return Emlute_StatusIsSpiritVFX() | Emlute_StatusIsManagementAura() | StatusId('HAS_SHOVEL') | StatusId('EMLUTE_KEEP_ALIVE') | StatusId('PERFORM_POSITIVE') | Emlute_StatusIsPaladinBuff() | Emlute_StatusIsDelay()
end

function Emlute_StatusIsPerformBaseGame()
	local baseGamePerform = StatusId('PERFORM_POSITIVE_THEPOWER') | StatusId('PERFORM_POSITIVE_BARDDANCE') | StatusId('PERFORM_POSITIVE_STARGAZING') | StatusId('PERFORM_POSITIVE_DOS2_1') | StatusId('PERFORM_POSITIVE_DOS2_2') | StatusId('PERFORM_POSITIVE_DOS2_3')
	return (baseGamePerform)
end

function Emlute_StatusIsPerformWithSpirits()
	local emlutePerform1 = StatusId('EMLUTE_PERFORM_THEPOWER') | StatusId('EMLUTE_PERFORM_BARDDANCE') | StatusId('EMLUTE_PERFORM_STARGAZING') | StatusId('EMLUTE_PERFORM_DOS2_1') | StatusId('EMLUTE_PERFORM_DOS2_2') | StatusId('EMLUTE_PERFORM_DOS2_3') | StatusId('EMLUTE_PERFORM_WEEPINGDAWN') | StatusId('EMLUTE_PERFORM_ENDLESSSPRING') | StatusId('EMLUTE_PERFORM_WELIVE') | StatusId('EMLUTE_PERFORM_HARPYSONG') | StatusId('EMLUTE_PERFORM_WATERQUEEN') | StatusId('EMLUTE_PERFORM_THEPOWERVOCALS') 
	return (emlutePerform1)
end

function Emlute_StatusIsPerformWithSprites_Summon()
	local emlutePerform1 = StatusId('EMLUTE_PERFORM_THEPOWER') | StatusId('EMLUTE_PERFORM_BARDDANCE') | StatusId('EMLUTE_PERFORM_STARGAZING') | StatusId('EMLUTE_PERFORM_DOS2_1') | StatusId('EMLUTE_PERFORM_DOS2_2') | StatusId('EMLUTE_PERFORM_DOS2_3')
	return (emlutePerform1)
end

function Emlute_StatusIsPerform()
	local baseGamePerform = Emlute_StatusIsPerformBaseGame()
	local emlutePerform1 = Emlute_StatusIsPerformWithSpirits()
	local emlutePerform2 = StatusId('EMLUTE_PERFORM_THEPOWER_NO_AURA') | StatusId('EMLUTE_PERFORM_BARDDANCE_NO_AURA') | StatusId('EMLUTE_PERFORM_STARGAZING_NO_AURA') | StatusId('EMLUTE_PERFORM_DOS2_1_NO_AURA') | StatusId('EMLUTE_PERFORM_DOS2_2_NO_AURA') | StatusId('EMLUTE_PERFORM_DOS2_3_NO_AURA') | StatusId('EMLUTE_PERFORM_WEEPINGDAWN_NO_AURA') | StatusId('EMLUTE_PERFORM_ENDLESSSPRING_NO_AURA') | StatusId('EMLUTE_PERFORM_WELIVE_NO_AURA') | StatusId('EMLUTE_PERFORM_HARPYSONG_NO_AURA') | StatusId('EMLUTE_PERFORM_WATERQUEEN_NO_AURA')| StatusId('EMLUTE_PERFORM_THEPOWERVOCALS_NO_AURA')
	local emlutePerform3 = StatusId('EMLUTE_PERFORM_THEPOWER_SPRITES') | StatusId('EMLUTE_PERFORM_BARDDANCE_SPRITES') | StatusId('EMLUTE_PERFORM_STARGAZING_SPRITES') | StatusId('EMLUTE_PERFORM_DOS2_1_SPRITES') | StatusId('EMLUTE_PERFORM_DOS2_2_SPRITES') | StatusId('EMLUTE_PERFORM_DOS2_3_SPRITES')
	return (baseGamePerform | emlutePerform1 | emlutePerform2 | emlutePerform3)
end

-- This is an experiment to invert the logic for interrupting performances.
-- The intention is to make this mod more defendable against other mods that do
-- things which interrupt music performances, like continuously apply statuses.
function Emlute_StatusSHOULDInterruptPerform()
    return Emlute_StatusIsPerform() | StatusId('EMLUTE_SILENCED_SPIRIT')
end

-- Actions which I think should end an in-combat performance (force concentration break)
function Emlute_EventBreaksInCombatPerformance()
	return (IsStatusEvent(StatusEvent.OnSpellCast) | IsStatusEvent(StatusEvent.OnEquip) | IsStatusEvent(StatusEvent.OnUnequip) | IsStatusEvent(StatusEvent.OnCombatEnded))
end

function Emlute_IsPerformingBaseGame(entity)
	local entity = entity or context.Source
	return HasAnyStatus({'PERFORM_POSITIVE_THEPOWER','PERFORM_POSITIVE_STARGAZING','PERFORM_POSITIVE_BARDDANCE','PERFORM_POSITIVE_DOS2_1','PERFORM_POSITIVE_DOS2_2','PERFORM_POSITIVE_DOS2_3'},{},{},entity)
end

function Emlute_IsPerforming(entity)
	local entity = entity or context.Source
	local musicStatus = HasAnyStatus({'EMLUTE_PERFORM_THEPOWER','EMLUTE_PERFORM_BARDDANCE','EMLUTE_PERFORM_STARGAZING','EMLUTE_PERFORM_DOS2_1','EMLUTE_PERFORM_DOS2_2','EMLUTE_PERFORM_DOS2_3','EMLUTE_PERFORM_WEEPINGDAWN','EMLUTE_PERFORM_ENDLESSSPRING','EMLUTE_PERFORM_WELIVE','EMLUTE_PERFORM_HARPYSONG','EMLUTE_PERFORM_WATERQUEEN','EMLUTE_PERFORM_THEPOWERVOCALS'},{},{},entity)
	local noAuraStatus = HasAnyStatus({'EMLUTE_PERFORM_THEPOWER_NO_AURA','EMLUTE_PERFORM_BARDDANCE_NO_AURA','EMLUTE_PERFORM_STARGAZING_NO_AURA','EMLUTE_PERFORM_DOS2_1_NO_AURA','EMLUTE_PERFORM_DOS2_2_NO_AURA','EMLUTE_PERFORM_DOS2_3_NO_AURA','EMLUTE_PERFORM_WEEPINGDAWN_NO_AURA','EMLUTE_PERFORM_ENDLESSSPRING_NO_AURA','EMLUTE_PERFORM_WELIVE_NO_AURA','EMLUTE_PERFORM_HARPYSONG_NO_AURA','EMLUTE_PERFORM_WATERQUEEN_NO_AURA','EMLUTE_PERFORM_THEPOWERVOCALS_NO_AURA'},{},{},entity)
	return (musicStatus | noAuraStatus)
end

function Emlute_IsPerformingAny(entity)
	local entity = entity or context.Source
	return (Emlute_IsPerforming(entity) | Emlute_IsPerformingBaseGame(entity))
end

function Emlute_IsVocalist(entity)
	local entity = entity or context.Target
	return ((~HasInstrumentEquipped(entity)) or Tagged('EMLUTE_VFX_WHISTLE', entity))
end

function Emlute_HasDrumEquipped(entity)
	local entity = entity or context.Target
	return HasInstrumentEquipped(entity) and Tagged('MUSIC_VFX_DRUM', GetItemInEquipmentSlot(EquipmentSlot.MusicalInstrument,entity))
end

function Emlute_HasFluteEquipped(entity)
	local entity = entity or context.Target
	return HasInstrumentEquipped(entity) and Tagged('MUSIC_VFX_FLUTE', GetItemInEquipmentSlot(EquipmentSlot.MusicalInstrument,entity))
end

function Emlute_HasLuteEquipped(entity)
	local entity = entity or context.Target
	return HasInstrumentEquipped(entity) and Tagged('MUSIC_VFX_LUTE', GetItemInEquipmentSlot(EquipmentSlot.MusicalInstrument,entity))
end

function Emlute_HasLyreEquipped(entity)
	local entity = entity or context.Target
	return HasInstrumentEquipped(entity) and Tagged('MUSIC_VFX_LYRE', GetItemInEquipmentSlot(EquipmentSlot.MusicalInstrument,entity))
end

function Emlute_HasViolinEquipped(entity)
	local entity = entity or context.Target
	return HasInstrumentEquipped(entity) and Tagged('MUSIC_VFX_VIOLIN', GetItemInEquipmentSlot(EquipmentSlot.MusicalInstrument,entity))
end

function Emlute_InstrumentIsDepleted(entity)
	local entity = entity or context.Target
	return HasStatus('EMLUTE_DEPLETED_INSTRUMENT',GetItemInEquipmentSlot(EquipmentSlot.MusicalInstrument,entity))
end

function Emlute_IsCompanion(entity)
    local entity = entity or context.Source
    local result = (Tagged('REALLY_KARLACH', entity) | Tagged('REALLY_ASTARION', entity) | Tagged('REALLY_HALSIN', entity) | Tagged('REALLY_LAEZEL', entity) | Tagged('REALLY_SHADOWHEART', entity) | Tagged('REALLY_MINTHARA', entity) | Tagged('REALLY_JAHEIRA', entity) | Tagged('REALLY_MINSC', entity) | Tagged('REALLY_GALE', entity) | Tagged('REALLY_WYLL', entity))
    return ConditionResult(result.Result, {ConditionError("EmluteIsNotCompanion")})
end

function Emlute_IsPerformSpell()
    return SpellId('Shout_Bard_Perform_Emlute') | SpellId('Shout_Bard_Perform_Emlute_Violin') | SpellId('Shout_Bard_Perform_Emlute_NoDLC') | SpellId('Shout_Bard_Perform_Emlute_Violin_NoDLC')
end

function Emlute_HasEmluteInstrumentEquipped(entity)
	local entity = entity or context.Target
	local instrument = GetItemInEquipmentSlot(EquipmentSlot.MusicalInstrument,entity)
	local emluteInstrument = (instrument.IsValid & Tagged('EMLUTE',instrument))	
	return ConditionResult(emluteInstrument.Result, {ConditionError("NoEmluteInstrumentEquipped")})
end

function Emlute_HasEmluteSpiritModeInstrumentEquipped(entity)
	local entity = entity or context.Target
	local instrument = GetItemInEquipmentSlot(EquipmentSlot.MusicalInstrument,entity)
	local spiritInstrument = (instrument.IsValid & Tagged('EMLUTE_SPIRIT_MODE',instrument))	
	return ConditionResult(spiritInstrument.Result, {ConditionError("NotEmluteSpiritModeInstrumentEquipped")})
end

function Emlute_HasEmluteCombatModeInstrumentEquipped(entity)
	local entity = entity or context.Target
	local instrument = GetItemInEquipmentSlot(EquipmentSlot.MusicalInstrument,entity)
	local combatInstrument = (instrument.IsValid & Tagged('EMLUTE_COMBAT_MODE',instrument))	
	return ConditionResult(combatInstrument.Result, {ConditionError("NotEmluteCombatModeInstrumentEquipped")})
end

function Emlute_IsNPCBard(entity)
	local entity = entity or context.Source
	return (Tagged('BARD',entity) and (not HasPassive('Emlute_Musical_Spirit',entity)) and HasInstrumentEquipped(entity) and (not Party(entity)))
end

function Emlute_MusicalLegendsEnabled(entity)
	local entity = entity or context.Source
	local legendEnabled = HasStatus('EMLUTE_MUSICAL_LEGENDS',entity)
	return ConditionResult(legendEnabled.Result, {ConditionError("MusicalLegendsScriptExtenderMissing")})
end
